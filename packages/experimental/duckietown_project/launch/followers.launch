<?xml version="1.0" encoding="utf-8"?>
<launch>
	<!-- start args TODO: most things here should come from node's config files!-->
	<arg name="veh" default="$(env VEHICLE_NAME)"
         doc="The name of the robot (e.g., autobot01, watchtower02, ...)"/>
    <arg name="robot_type" default="$(env ROBOT_TYPE)"
         doc="The type of the robot (e.g., duckiebot, watchtower, traffic_light, ...)"/>
    <arg name="robot_configuration" default="$(env ROBOT_CONFIGURATION)"
         doc="The configuration of the robot (e.g., DB19, DB20, WT18, ...)"/>
    <arg name="demo_name" /> <!-- this is required  used for demo specific configs like fsm -->
	<arg name="config" default="baseline" />
	<arg name="camera_topic" default="camera_node"/>
	<arg name="param_file_name" default="default" />
	<!-- <arg name="apriltags_param_file_name" default="$(arg param_file_name)" /> -->
	<!-- <arg name="fsm_file_name" default="$(arg demo_name)" /> -->
	<arg name="verbose" default="false" />
	<arg name="ai_trafo_mode" default="cb" doc="'cb' for colo balance only; 'both' for color balance and linear trafo"/>
	<arg name="ai_interval" default="5" doc="interval with which the linear trafo gets updated. color balance is performed every second."/>
	<arg name="line_detector_param_file_name" default="$(arg param_file_name)"/>
	<arg name="intersectionType" default= "stopSign"/>
	<!-- end args -->

<!-- start switch args -->
    <arg name="/camera/raw" default="true"/>
    <arg name="/camera/rect" default="true"/>

    <arg name="anti_instagram" default="true"/>

    <arg name="visualization" default="false" />

    <arg name="lane_following" default="true"/>
    <arg name="/lane_following/line_detection" default="true"/>
    <arg name="/lane_following/ground_projection" default="true"/>
    <arg name="/lane_following/lane_filter" default="true"/>
    <arg name="/lane_following/stop_line_filter" default="true"/>
    <arg name="/lane_following/lane_controller" default="true"/>
<!-- 
<arg name="fsm" default="false"/>
    <arg name="/fsm/logic_gate" default="false"/> -->

<!-- Image Decoding -->
    <group if="$(arg /camera/raw)">
        <remap from="decoder_node/image_in" to="camera_node/image/compressed"/>
        <remap from="decoder_node/image_out" to="camera_node/image/raw"/>
        <include file="$(find image_processing)/launch/image_decoding.launch">
            <arg name="veh" value="$(arg veh)"/>
            <arg name="param_file_name" value="$(arg param_file_name)"/>
        </include>
    </group>


    <!-- Image Rectification -->
    <group if="$(arg /camera/rect)">
        <remap from="rectifier_node/image_in" to="camera_node/image/compressed"/>
        <remap from="rectifier_node/camera_info_in" to="camera_node/camera_info"/>
        <include file="$(find image_processing)/launch/image_rectification.launch">
            <arg name="veh" value="$(arg veh)"/>
        </include>
    </group>
    <!-- End Camera -->

<group if="$(arg lane_following)">

        <!-- Line Detector -->
        <group if="$(arg /lane_following/line_detection)">
            <remap from="line_detector_node/thresholds" to="anti_instagram_node/thresholds"/>
            <remap from="line_detector_node/image/compressed" to="camera_node/image/compressed"/>
            <include file="$(find line_detector)/launch/line_detector_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="param_file_name" value="$(arg line_detector_param_file_name)"/>
            </include>
        </group>
        
        <group if="$(arg anti_instagram)">
            <remap from="anti_instagram_node/uncorrected_image/compressed" to="camera_node/image/compressed"/>
            <!-- NOT LOADING PARAMS FROM A YAML FILE -->
            <include file="$(find anti_instagram)/launch/anti_instagram_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <!-- <arg name="ai_interval" value="$(arg ai_interval)"/>-->
            </include>
        </group>
        <!-- Ground projection -->
        <group if="$(arg /lane_following/ground_projection)">
            <remap from="~lineseglist_in" to="line_detector_node/segment_list"/>
            <remap from="~cali_image" to="$(arg camera_topic)/image/raw"/>
            <remap from="~camera_info" to="$(arg camera_topic)/camera_info"/>
            <include file="$(find ground_projection)/launch/ground_projection_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
            <group if="$(arg visualization)">
                <remap from="line_segment_visualizer_node/segment_list" to="ground_projection_node/lineseglist_out"/>
                <remap from="line_segment_visualizer_node/segment_list_filtered" to="lane_filter_node/seglist_filtered"/>
                <include file="$(find visualization_tools)/launch/line_segment_visualizer_node.launch">
                    <arg name="veh" value="$(arg veh)" />
                </include>
            </group>
        </group>

        <!-- Lane Filter -->
        <group if="$(arg /lane_following/lane_filter)">
            <remap from="lane_filter_node/segment_list" to="ground_projection_node/lineseglist_out"/>
            <remap from="lane_filter_node/car_cmd" to="car_cmd_switch_node/cmd"/>
            <remap from="lane_filter_node/fsm_mode" to="fsm_node/mode" />
            <remap from="lane_filter_node/left_wheel_encoder_node/tick" to="left_wheel_encoder_node/tick"/>
            <remap from="lane_filter_node/right_wheel_encoder_node/tick" to="right_wheel_encoder_node/tick"/>
	        <!--<remap from="lane_filter_node/seglist_filtered" to="lane_controller_node/seglist_filtered" />-->
            <include file="$(find lane_filter)/launch/lane_filter_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
        </group>

        <!-- Stop Line Filter -->
        <group if="$(arg /lane_following/stop_line_filter)">
            <remap from="stop_line_filter_node/lanewidth" to="lane_filter_node/lanewidth"/>
            <remap from="stop_line_filter_node/lane_pose" to="lane_filter_node/lane_pose"/>
            <remap from="stop_line_filter_node/segment_list" to="ground_projection_node/lineseglist_out"/>
            <include file="$(find stop_line_filter)/launch/stop_line_filter_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
        </group>

        <!-- Lane controller -->
        <group if="$(arg /lane_following/lane_controller)">
            <remap from="lane_controller_node/lane_pose" to="lane_filter_node/lane_pose"/>
            <remap from="lane_controller_node/wheels_cmd" to="wheels_driver_node/wheels_cmd" />
            <remap from="lane_controller_node/fsm_mode" to="fsm_node/mode" />
            <remap from="lane_controller_node/obstacle_distance_reading" to="road_anomaly_watcher/obstacle_distance"/>
            <!-- <remap from="lane_controller_node/obstacle_avoidance_pose" to="obst_avoid/obstacle_avoidance_pose" /> -->
            <!-- <remap from="lane_controller_node/obstacle_detected" to="obstacle_avoidance_node/obstacle_avoidance_active_flag" /> -->
            <remap from="lane_controller_node/stop_line_reading" to="stop_line_filter_node/stop_line_reading" />
            <remap from="wheels_driver_node/radius_limit" to="lane_controller_node/radius_limit" />
            <include file="$(find lane_control)/launch/lane_controller_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
        </group>

        <!-- Visualization -->
        <group if="$(arg visualization)">
            <include file="$(find visualization_tools)/launch/lane_pose_visualizer_node.launch">
                <arg name="veh" value="$(arg veh)"/>
            </include>
        </group>

    </group>
    <!-- End Lane Control -->

</launch>


<!-- <?xml version="1.0" encoding="utf-8"?>
<launch>
	<arg name="veh" default="$(env VEHICLE_NAME)"/>
    <arg name="demo_name" value="lane_following"/>
	 start basic args
	<include file="$(find duckietown_demos)/launch/master.launch">
	     Basic arguments
		<arg name="veh" value="$(arg veh)"/>
        <arg name="demo_name" value="$(arg demo_name)"/>
		<arg name="param_file_name" value="default" />
		<arg name="visualization" value="true" />

	    
	    <arg name="fsm" value="true"/>
	    <arg name="/fsm/logic_gate" value="false"/>

		
		<arg name="anti_instagram" value="true" />

		
	<arg name="/localization" value="true"/>
		<arg name="/localization/deadreckoning" value="true"/>
LP removing for now

	    <arg name="lane_following" value="true"/>
	    <arg name="/lane_following/line_detection" value="true"/>
	    <arg name="line_detector_param_file_name" value="default" />
	    <arg name="/lane_following/ground_projection" value="true"/>
	    <arg name="/lane_following/lane_filter" value="true"/>
	    <arg name="/lane_following/lane_controller" value="true"/>
	    <arg name="/lane_following/stop_line_filter" value="true"/>
	    <arg name="LED" value="true"/>
	    <arg name="/LED/emitter" value="true"/>

  	</include>

</launch> -->
